// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const addThumbnail = `-- name: AddThumbnail :exec
INSERT INTO thumbnails(video_id, thumbnail, updated_at)
VALUES (?, ?, CURRENT_TIMESTAMP)
ON CONFLICT(video_id) DO UPDATE SET
    thumbnail = excluded.thumbnail,
    updated_at = CURRENT_TIMESTAMP
`

type AddThumbnailParams struct {
	VideoID   string
	Thumbnail []byte
}

func (q *Queries) AddThumbnail(ctx context.Context, arg AddThumbnailParams) error {
	_, err := q.db.ExecContext(ctx, addThumbnail, arg.VideoID, arg.Thumbnail)
	return err
}

const addVideo = `-- name: AddVideo :exec
INSERT INTO videos (video_id, title, thumbnail_url, channel_name, description, published_at, hours, minutes, seconds, was_live, is_hidden)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)
    ON CONFLICT(video_id) DO UPDATE SET
	title = excluded.title,
	thumbnail_url = excluded.thumbnail_url,
	channel_name = excluded.channel_name,
	description = excluded.description,
	published_at = excluded.published_at,
	hours = excluded.hours,
	minutes = excluded.minutes,
	seconds = excluded.seconds,
	was_live = excluded.was_live
`

type AddVideoParams struct {
	VideoID      string
	Title        sql.NullString
	ThumbnailUrl sql.NullString
	ChannelName  sql.NullString
	Description  sql.NullString
	PublishedAt  sql.NullString
	Hours        sql.NullInt64
	Minutes      sql.NullInt64
	Seconds      sql.NullInt64
	WasLive      sql.NullInt64
}

func (q *Queries) AddVideo(ctx context.Context, arg AddVideoParams) error {
	_, err := q.db.ExecContext(ctx, addVideo,
		arg.VideoID,
		arg.Title,
		arg.ThumbnailUrl,
		arg.ChannelName,
		arg.Description,
		arg.PublishedAt,
		arg.Hours,
		arg.Minutes,
		arg.Seconds,
		arg.WasLive,
	)
	return err
}

const fetchThumbnail = `-- name: FetchThumbnail :one
SELECT thumbnail FROM thumbnails WHERE video_id = ?
`

func (q *Queries) FetchThumbnail(ctx context.Context, videoID string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, fetchThumbnail, videoID)
	var thumbnail []byte
	err := row.Scan(&thumbnail)
	return thumbnail, err
}

const fetchVideos = `-- name: FetchVideos :many
select video_id, title, thumbnail_url, channel_name, description, published_at, hours, minutes, seconds, was_live, is_hidden
from videos
where is_hidden = 0
order by published_at desc
limit ?
`

type FetchVideosParams struct {
	Limit int64
}

func (q *Queries) FetchVideos(ctx context.Context, arg FetchVideosParams) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, fetchVideos, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.VideoID,
			&i.Title,
			&i.ThumbnailUrl,
			&i.ChannelName,
			&i.Description,
			&i.PublishedAt,
			&i.Hours,
			&i.Minutes,
			&i.Seconds,
			&i.WasLive,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hideVideo = `-- name: HideVideo :exec
;
update videos
set is_hidden = 1
where video_id = ?
`

func (q *Queries) HideVideo(ctx context.Context, videoID string) error {
	_, err := q.db.ExecContext(ctx, hideVideo, videoID)
	return err
}
